stages:
  - build
  - deploy

.assume_role: &assume_role
  - >
    export ROLE_ARN=arn:aws:iam::736839909347:role/gitlab-oidc-GitLabActionsRole;
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
    $(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token $CI_JOB_JWT_V2
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - aws sts get-caller-identity
    
   
build_artifact:
  stage: build
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install zip unzip
  script:
    - mkdir dist
    - zip -r dist/custom-control-tower-configuration.zip custom-control-tower-configuration/
  artifacts:
    paths:
      - dist/custom-control-tower-configuration.zip

deploy_s3:
  stage: deploy
  needs: ["build_artifact"]
  image: python:3
  before_script:
    - apt-get update && apt-get install -y awscli
    - apt-get install -y jq
  script:
    - *assume_role
    - aws s3 cp dist/custom-control-tower-configuration.zip s3://custom-control-tower-configuration-736839909347-eu-west-2/custom-control-tower-configuration.zip