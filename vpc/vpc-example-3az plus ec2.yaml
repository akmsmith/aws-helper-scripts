AWSTemplateFormatVersion: "2010-09-09"

Description:  This template deploys athe infrastructure required for the 

Parameters:

  Company:
    Description: Company name
    Type: String
    Default: Elevation
  
  AppName:
    Description: App Name
    Type: String
    Default: mt4
  
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/18)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

  Environment:
    Description: Environment (dev, prod, qa etc)
    Type: String
  
  Instancetype:
    Description: Size of the instance (t2.micro, t2.small etc)
    Type: String
    Default: t2.micro

  AMI:
    Description: Machine image used
    Type: String
    Default: ami-0f8f14284458dda65
  
  Keyname:
    Description: Key used to deploy
    Type: String
    Default: mt4

  AdminIP:
    Description: IP Address used for admin work
    Type: String
    Default: 127.0.0.1/32

Resources:

  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Retain
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.10.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.11.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-public-2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.12.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-public-3
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.20.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.21.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-private-2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.22.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-private-3
  
          
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.30.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-database-1

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.31.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-database-2

  DatabaseSubnet3:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Sub '10.${ClassB}.32.0/24'
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-database-3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Retain
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Company} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway        

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Company} Private Routes
          
  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Company} Database Routes

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3
  
  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet2   

  DatabaseSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet3
  
  Instance:
    Type: AWS::EC2::Instance
    Properties:        
      KeyName: !Ref Keyname
      ImageId: !Ref AMI
      InstanceType: !Ref Instancetype
      Monitoring: false
      IamInstanceProfile: !Ref Ec2InstanceProfile
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref InstanceSg
      Tags:
        - Key: Name
          Value: !Sub ${Company}-${Environment}-${AppName}
  
  InstanceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Company}-${Environment}-${AppName}-ec2-sg
      GroupDescription: ec2 security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: !Ref AdminIP
      SecurityGroupEgress:
      - IpProtocol: -1
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole ]
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action:
              - sts:AssumeRole
      Path: /

  StaticIP:
    Type: AWS::EC2::EIP
    Properties: 
      InstanceId: !Ref Instance
  
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${Company}-${Environment}-vpc

  PublicSubnet1:
    Description: A reference to the public subnet1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-public-subnet1

  PublicSubnet2:
    Description: A reference to the public subnet2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-public-subnet2

  PublicSubnet3:
    Description: A reference to the public subnet3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-public-subnet3

  PrivateSubnet1:
    Description: A reference to the private subnet1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-private-subnet1

  PrivateSubnet2:
    Description: A reference to the private subnet2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-private-subnet2

  PrivateSubnet3:
    Description: A reference to the private subnet3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-private-subnet3  


  DatabaseSubnet1:
    Description: A reference to the database subnet1
    Value: !Ref DatabaseSubnet1
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-database-subnet1

  DatabaseSubnet2:
    Description: A reference to the database subnet2
    Value: !Ref DatabaseSubnet2
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-database-subnet2

  DatabaseSubnet3:
    Description: A reference to the database subnet3
    Value: !Ref DatabaseSubnet3
    Export:
      Name: !Sub ${Company}-${Environment}-vpc-database-subnet3
